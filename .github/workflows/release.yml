name: Publish GitHub release

on:
  workflow_call:
    inputs:
      emscripten-version:
        description: The Emscripten version
        default: ${{vars.EMSCRIPTEN_VERSION || '3.1.64'}}
        type: string
      generate:
        description: Generate the parser artifacts
        default: false
        type: boolean
      attestations:
        description: Generate attestations for artifacts
        default: false
        type: boolean

permissions:
  contents: write
  id-token: write
  attestations: write

jobs:
  release:
    name: Build release artifacts
    runs-on: ubuntu-latest
    env:
      REPO_NAME: ${{github.event.repository.name}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Emscripten
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: ${{inputs.emscripten-version}}
      - name: Set up tree-sitter CLI
        uses: tree-sitter/setup-action/cli@v1
      - name: Install parser dependencies
        run: |-
          JQ_SCRIPT='.dependencies | del(."node-addon-api", ."node-gyp-build") | length > 0'
          if jq -e "$JQ_SCRIPT" package.json >/dev/null; then
            npm i --omit dev --omit peer --omit optional
          fi
      - name: Generate parser
        if: inputs.generate
        run: tree-sitter generate
      - name: Build Wasm binaries
        shell: bash
        run: |-
          while read -r grammar; do
            tree-sitter build --wasm "${grammar%/grammar.js}"
          done < <(find -name grammar.js -not -path './node_modules/*')
      - name: Create source code tarball
        run: >-
          git ls-files > "$RUNNER_TEMP/files"
          printf '%s\n' >> "$RUNNER_TEMP/files" \
              src/parser.c src/grammar.json src/node-types.json src/tree_sitter/*
          tar cvzf "$REPO_NAME.tar.xz" -T <(sort -u "$RUNNER_TEMP/files")
      - name: Generate attestations
        uses: actions/attest-build-provenance@v1
        if: inputs.attestations
        with:
          subject-path: |
            *.wasm
            ${{env.REPO_NAME}}.tar.xz
      - name: Create GitHub release
        run: |-
          gh release create "$GITHUB_REF_NAME" *.wasm "$REPO_NAME.tar.xz" \
            -n "**NOTE:** Download \`$REPO_NAME.tar.xz\` for the *complete* source code."
        env:
          GH_TOKEN: ${{github.token}}
